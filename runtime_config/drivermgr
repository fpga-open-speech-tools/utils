#!/bin/bash

# drivermgr
#
# Load and remove kernel modules.
#
# Usage: drivermgr.sh load <directory>
#        drivermgr.sh remove <directory>
# 
# This script assumes that the kernel modules we want to load
# live in /lib/modules/<directory>. By convention, <directory>
# matches the name of the device tree overlay that the kernel
# modules are associated with. The kernel modules location 
# can be changed via the --driver-path argument.
#
# author Trevor Vannoy
# copyright 2020 Audio Logic
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Trevor Vannoy
# Audio Logic
# 985 Technology Blvd
# Bozeman, MT 59718
# openspeech@flatearthinc.com

COMMAND=""
MODULE_PATH_PREFIX=/lib/modules
MODULES_PATH=""
VERBOSE=0

# Print brief usage help
#
# Primarily for when users invoke the script incorrectly.
# 
# Globals
# -------
#   None
# 
# Arguments
# ---------
#   None
function short_usage() {
  echo "usage: drivermgr [-h] [-v] [--driver-path DRIVER_PATH] <COMMAND> DIRECTORY"
}

# Print verbose usage help
#
# Globals
# -------
#   None
#
# Arguments
# ---------
#   None
function usage() {
  short_usage
  echo
  echo "Load and remove kernel modules."
  echo 
  echo "commands:"
  echo "  load                        load kernel module(s)"
  echo "  remove                      remove kernel module(s)"
  echo
  echo "positional arguments:"
  echo "  DIRECTORY                   directory name that contains the modules"
  echo 
  echo "optional arguments:"
  echo "  -h, --help                  display this help text"
  echo "  -v, --verbose               print more details about what's going on"
  echo "  --driver-path DRIVER_PATH   path where drivers directory is located"
  echo "                              (default: /lib/modules/)"
  echo
  echo "Kernel modules are required to be in a directory with the same name"
  echo "as the \"directory\" argument (i.e. DRIVER_PATH/DIRECTORY)"
}

# Parse command-line arguments
# 
# Globals
# -------
#   VERBOSE
#   MODULE_PATH_PREFIX
#   POSITIONAL_ARGS
#   COMMAND
#   MODULES_PATH
#
# Arguments
# ---------
#   Command-line parameters "$@"
function parse_args() {
  local positional_args

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        usage
        exit
        ;;
      -v|--verbose)
        VERBOSE=1
        # pop argument off the argument array
        shift
        ;;
      --driver-path)
        MODULE_PATH_PREFIX="$2"
        # if the string ends in a /, remove it
        if [[ "${MODULE_PATH_PREFIX: -1}" == "/" ]]; then
            MODULE_PATH_PREFIX="${MODULE_PATH_PREFIX:0:-1}"
        fi
        # pop argument and value off the argument array
        shift 2
        ;;
      --*)
        echo "Unrecognized argument: $1" 1>&2
        echo
        short_usage
        exit 1
        ;;
      *)
        # add positional argument to positional arguments array for later
        positional_args+=("$1")
        # pop argument off the argument array
        shift
        ;;
    esac
  done

  if [[ "${#positional_args[*]}" -eq 0 ]]; then
    # print help when no arguments are supplied
    usage
    exit 1
  elif [[ "${#positional_args[*]}" -ne 2 ]]; then
    # make sure the user supplied 2 arguments
    echo "Incorrect number of positional arguments." 1>&2
    echo
    short_usage
    exit 1
  fi

  # grab command and modules directory name from the positional arguments
  COMMAND="${positional_args[0]}"
  MODULES_PATH="${MODULE_PATH_PREFIX}"/"${positional_args[1]}"

  readonly VERBOSE
  readonly COMMAND
  readonly MODULES_PATH
  readonly MODULE_PATH_PREFIX
}

# Load kernel modules
#
# This loads all modules in the user-provided directory
#
# Globals
# -------
#   MODULES_PATH
#   VERBOSE
#
# Arguments
# ---------
#   None
function load() {
  local error_msg

  if [[ -d "${MODULES_PATH}" ]]; then
    for module in "${MODULES_PATH}"/*.ko; do
      if [[ "${VERBOSE}" -eq 1 ]]; then
        echo "loading kernel module: ${module}"
      fi
      insmod ${module}
    done
  else
    error_msg="${MODULES_PATH} doesn't exist; either there aren't any drivers"
    error_msg+=" associated with the project, or the directory is incorrect"
    echo "${error_msg}" 1>&2
  fi
}

# Remove kernel modules
#
# This removes all modules in the user-provided directory
#
# Globals
# -------
#   MODULES_PATH
#   VERBOSE
#
# Arguments
# ---------
#   None
function remove() {
  local error_msg

  if [[ -d "${MODULES_PATH}" ]]; then
    for module in "${MODULES_PATH}"/*.ko; do
      if [[ "${VERBOSE}" -eq 1 ]]; then
        echo "removing kernel module: ${module}"
      fi
      rmmod ${module}
    done
  else
    error_msg="${MODULES_PATH} doesn't exist; either there aren't any drivers"
    error_msg+=" associated with the project, or the directory is incorrect"
    echo "${error_msg}" 1>&2
  fi
}

# Load or remove kernel modules according to user-supplied arguments
#
# Globals
# -------
#   COMMAND
#
# Arguments
# ---------
#   Command-line arguments "$@"
main() {
  parse_args "$@"

  case "${COMMAND}" in
    load)
      load
      ;;
    remove)
      remove
      ;;
    *)
      echo "Incorrect command. Must be either \"load\" or \"remove\"." 1>&2
      echo
      short_usage
      exit 1
      ;;
  esac
}

main "$@"