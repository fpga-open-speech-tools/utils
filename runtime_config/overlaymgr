#!/bin/bash

# overlaymgr
#
# Load and remove device tree overlays.
#
# Usage: overlaymgr.sh load <overlay_name>
#        overlaymgr.sh remove <overlay_name>
# 
# This script uses the configfs overlay interface to load and 
# remove device tree overlays at runtime. The overlays can
# program the FPGA via the fpga manager, as well as add/remove
# nodes in the device tree. In general, our overlays will do
# both of the preceeding, but that need not always be the case.
#
# The overlay (.dtbo) and the FPGA bitstream (.rbf) need to be
# located in /lib/firmware before running this script. It is assumed
# that the overlay and bitstream have the same name, and are named according
# to the Quartus project they came from.  
#
# See documentation/devicetree/configfs-overlays.txt in the kernel documentation
# for more information on the configfs overlay interface.
#
# author Trevor Vannoy
# copyright 2020 Audio Logic
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Trevor Vannoy
# Audio Logic
# 985 Technology Blvd
# Bozeman, MT 59718
# openspeech@flatearthinc.com

COMMAND=""
OVERLAY_NAME=""
readonly CONFIGFS_PATH=/sys/kernel/config/device-tree/overlays
VERBOSE=0

# Print brief usage help
#
# Primarily for when users invoke the script incorrectly.
#
# Globals
# -------
#   None
#
# Arguments
# ---------
#   None
function short_usage() {
  echo "usage: overlaymgr [-h] [-v] <COMMAND> OVERLAY"
}

# Print verbose usage help
#
# Globals
# -------
#   None
#
# Arguments
# ---------
#   None
function usage() {
  short_usage
  echo
  echo "Load and remove device tree overlays."
  echo 
  echo "commands:"
  echo "  load            load a device tree overlay"
  echo "  remove          remove a device tree overlay"
  echo
  echo "positional arguments:"
  echo "  OVERLAY         the name of the overlay file to load/remove"
  echo 
  echo "optional arguments:"
  echo "  -h, --help      display this help text"
  echo "  -v, --verbose   print more details about what's going on"
}

# Parse command-line arguments
# 
# Globals
# -------
#   VERBOSE
#   MODULE_PATH_PREFIX
#   COMMAND
#   MODULES_PATH
#
# Arguments
# ---------
#   Command-line parameters "$@"
function parse_args() {
  local positional_args

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        usage
        exit
        ;;
      -v|--verbose)
        VERBOSE=1
        # pop argument off the argument array "$@"
        shift
        ;;
      -d|--dir)
        shift
        OVERLAY_DIR="$1"
        # pop argument off the argument array "$@"
        shift
        ;;
      --*)
        echo "Unrecognized argument: $1" 1>&2
        echo
        short_usage
        exit 1
        ;;
      *)
        # add positional argument to positional arguments array for later
        positional_args+=("$1")
        # pop argument off the argument array "$@"
        shift
        ;;
    esac
  done

  if [[ "${#positional_args[*]}" -eq 0 ]]; then
    # print help when no arguments are supplied
    usage
    exit 1
  elif [[ "${#positional_args[*]}" -ne 2 ]]; then
    # make sure the user supplied two positional arguments
    echo "Incorrect number of positional arguments." 1>&2
    echo
    short_usage
    exit 1
  fi

  # grab command and overlay name from the positional arguments
  COMMAND="${positional_args[0]}"
  OVERLAY_NAME="${positional_args[1]}"

  if [ -z "$OVERLAY_DIR" ]; then
    OVERLAY_DIR=$OVERLAY_NAME
  fi

  readonly VERBOSE
  readonly COMMAND
  readonly OVERLAY_NAME
}

# Load the device tree overlay
#
# To load an overlay, we first need to create a directory in the configfs 
# pseudofilesystem: /sys/kernel/config/device-tree/overlays/<overlay_name>
# The kernel mounts configfs at /sys/kernel/config, and creates the 
# device-tree/overlays directory for us. We echo the overlay file name to the
# path property file that gets created for us in the <overlay_name> directory.
#
# Globals
# -------
#   VERBOSE
#   CONFIGFS_PATH
#   OVERLAY_NAME
#
# Arguments
# ---------
#   None
function load() {
  if [[ "${VERBOSE}" -eq 1 ]]; then
    echo "Making device tree overlay directory"
    echo "    mkdir ${CONFIGFS_PATH}/${OVERLAY_DIR}"
    echo
  fi
  # make the overlay directory in configfs
  mkdir "${CONFIGFS_PATH}"/"$OVERLAY_DIR"

  if [[ "${VERBOSE}" -eq 1 ]]; then
    echo "Applying overlay"
    echo "    echo ${OVERLAY_NAME}.dtbo > ${CONFIGFS_PATH}/$OVERLAY_DIR/path"
    echo
  fi
  # load overlay by echoing the overlay file name to the path property file
  eval echo "${OVERLAY_NAME}".dtbo > "${CONFIGFS_PATH}"/"$OVERLAY_DIR"/path
}

# Remove the device tree overlay.
#
# Overlays are removed by removing the configfs overlay directory we created:
# /sys/kernel/config/device-tree/overlays/<overlay_name>. This removes nodes
# from the device tree, but it doesn't unload the FPGA bitstream. When used to 
# program the FPGA, overlays must be removed before loading in a new overlay 
# (according to empirical testing, anyway). 
#
# Globals
# -------
#   VERBOSE
#   CONFIGFS_PATH
#   OVERLAY_NAME
#
# Arguments
# ---------
#   None
function remove() {
  if [[ "${VERBOSE}" -eq 1 ]]; then
    echo "Removing overlay directory"
    echo "    rmdir ${CONFIGFS_PATH}/${OVERLAY_NAME}"
    echo
  fi
  # remove the configfs overlay directory
  rmdir "${CONFIGFS_PATH}"/"${OVERLAY_NAME}"
}

# Load or remove a device tree overlay according to user-supplied arguments
#
# Globals
# -------
#   COMMAND
#
# Arguments
# ---------
#   Command-line arguments "$@"
function main() {
  parse_args "$@"

  case $COMMAND in
    load)
      load
      ;;
    remove)
      remove
      ;;
    *)
      echo "Incorrect command. Must be either \"load\" or \"remove\"." 1>&2
      echo
      short_usage
      exit 1
      ;;
  esac
}

main "$@"
